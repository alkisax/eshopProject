paths:
  /api/users/signup/user:
    post:
      summary: Create a new user account
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  example: johndoe
                password:
                  type: string
                  example: Password1!
                name:
                  type: string
                  example: John Doe
                email:
                  type: string
                  format: email
                  example: johndoe@example.com
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Validation error
        "409":
          description: Username or email already taken
        "500":
          description: Server error

  /api/users/signup/admin:
    post:
      summary: Create a new admin account
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  example: adminuser
                password:
                  type: string
                  example: AdminPass1!
                name:
                  type: string
                  example: Alice Admin
                email:
                  type: string
                  format: email
                  example: alice@example.com
                roles:
                  type: array
                  items:
                    type: string
                  example: [ "ADMIN" ]
      responses:
        "201":
          description: Admin created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Missing required fields or validation error
        "401":
          description: Unauthorized (no or invalid token)
        "403":
          description: Forbidden (not an ADMIN)
        "409":
          description: Username or email already taken
        "500":
          description: Server error

  /api/users:
    get:
      summary: Get all users
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of all users
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized - no token or invalid token
        '500':
          description: Internal Server Error

  /api/users/username/{username}:
    get:
      summary: Get user by username
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
          description: Username of the user to fetch
      responses:
        '200':
          description: User data
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/User'
        '400':
          description: Bad request - missing username
        '401':
          description: Unauthorized - no token or invalid token
        '500':
          description: Internal Server Error

  /api/users/{id}:
    get:
      summary: Get user by ID
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: User ID
      responses:
        '200':
          description: User data
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/User'
        '400':
          description: Bad request - missing ID
        '401':
          description: Unauthorized - no token or invalid token
        '500':
          description: Internal Server Error

    put:
      summary: Update user by ID (admin or self)
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: User ID to update
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Partial user data to update
              properties:
                username:
                  type: string
                password:
                  type: string
                name:
                  type: string
                email:
                  type: string
                  format: email
                roles:
                  type: array
                  items:
                    type: string
              example:
                username: newusername
                password: NewPass1!
                email: newemail@example.com
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/User'
        '400':
          description: Validation error or missing ID
        '401':
          description: Unauthorized (no token or invalid)
        '403':
          description: Forbidden (not admin or not updating own profile)
        '404':
          description: User not found
        '409':
          description: Username already taken
        '500':
          description: Internal server error

    delete:
      summary: Delete user by ID (admin only)
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: User ID to delete
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User johndoe deleted successfully
        '400':
          description: Missing or invalid user ID
        '401':
          description: Unauthorized (no token or invalid)
        '403':
          description: Forbidden (only admin allowed)
        '404':
          description: User not found
        '500':
          description: Internal server error